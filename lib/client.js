// Generated by CoffeeScript 1.6.2
var Client, Response, conf, fs, https, queryString, request, _;

https = require('https');

queryString = require('qs');

request = require('request');

conf = require('./config/config');

_ = require('underscore');

fs = require('fs');

_.templateSettings = {
  interpolate: /\{\{(.+?)\}\}/g
};

Response = (function() {
  function Response(res, body) {
    this.code = res.statusCode;
    this.data = body;
  }

  return Response;

})();

module.exports = Client = (function() {
  /*
    Constructor
    parameters:
      apiId   required
      apiKey  required
  */
  function Client(host, apiId, apiKey) {
    if (!(apiId || apiKey || host)) {
      throw "Requires host, apiId and apiKey";
    }
    this.server = "https://" + apiId + ":" + apiKey + "@" + host;
  }

  /*
    route:
      method
      uri
    data:
      additional: params to add to URI
      body: request body
      qs: querystring
  */


  Client.prototype.request = function(route, data, callback) {
    var opts,
      _this = this;

    if (typeof data.body === 'object') {
      data.body = _.omit(data.body, '_name');
    }
    opts = {
      url: this.server + route.uri,
      method: route.method,
      body: data.body || '',
      qs: data.qs || '',
      json: true,
      strictSSL: false
    };
    return request(opts, function(err, response, body) {
      return _this._response(err, response, body, function(err, body) {
        return callback(err, body);
      });
    });
  };

  /*
    getUserAccess
      Gets the list of users with any access on the index
  */


  Client.prototype.getUserAccess = function(data, callback) {
    var route;

    if (data.index == null) {
      throw "requires index name";
    }
    route = conf.get('routes:getUserAceess');
    route.uri = _.template(route.uri, {
      index: data.index
    });
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    updateUserAccess
      Updates user access on index
  */


  Client.prototype.updateUserAccess = function(data, callback) {
    var route;

    if (data.index == null) {
      throw "requires index name";
    }
    route = conf.get('routes:updateUserAccess');
    route.uri = _.template(route.uri, {
      index: data.index
    });
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    deleteUserAccess
      Deletes an user`s access on index
  */


  Client.prototype.deleteUserAccess = function(data, callback) {
    var route;

    if (data.index == null) {
      throw "requires index name";
    }
    route = conf.get('routes:deleteUserAccess');
    route.uri = _.template(route.uri, {
      index: data.index
    });
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    createIndex:
      Create a new Index
  */


  Client.prototype.createIndex = function(data, callback) {
    var route;

    if (data.body.name == null) {
      throw "required fields missing";
    }
    route = conf.get('routes:createIndex');
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    updateIndex:
      Update an Index
  */


  Client.prototype.updateIndex = function(data, callback) {
    var route;

    if (data.index == null) {
      throw "requires index name";
    }
    route = conf.get('routes:updateIndex');
    route.uri = _.template(route.uri, {
      index: data.name
    });
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    listIndexes
      List all indexes
  */


  Client.prototype.listIndexes = function(data, callback) {
    return this.request(conf.get('routes:listIndex'), {}, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    Get Index
    data:
      name: Required
  */


  Client.prototype.getIndex = function(data, callback) {
    var route;

    if (data.index == null) {
      throw "requires index name";
    }
    route = conf.get('routes:getIndex');
    route.uri = _.template(route.uri, {
      index: data.name
    });
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    delete:
      deletes your mom
  */


  Client.prototype.deleteIndex = function(data, callback) {
    var route;

    if (data.index == null) {
      throw "requires index name";
    }
    route = conf.get('routes:deleteIndex');
    route.uri = _.template(route.uri, {
      index: data.name
    });
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    addDocument:
      upload a doc
  */


  Client.prototype.addDocument = function(data, callback) {
    var route,
      _this = this;

    if (!((data.index != null) && (data.name != null))) {
      throw "required index and document name";
    }
    route = conf.get('routes:addDocument');
    route.uri = _.template(route.uri, {
      index: data.index,
      name: encodeURIComponent(data.name)
    });
    route.url = this.server + route.uri;
    route.strictSSL = false;
    return fs.stat(data.body, function(error, stat) {
      var opts;

      if (error) {
        return callback(error, null);
      }
      opts = {
        url: _this.server + route.uri,
        method: 'PUT',
        strictSSL: false,
        headers: {
          'Content-Length': stat.size
        }
      };
      return fs.createReadStream(data.body).pipe(request(opts, function(err, response, body) {
        return _this._response(err, response, body, function(err, body) {
          return callback(err, body);
        });
      }));
    });
  };

  /*
    listAction -> List all Documents
    params:
      index (required)
  */


  Client.prototype.listDocuments = function(data, callback) {
    var route;

    if (data.index == null) {
      throw "required index name";
    }
    route = conf.get('routes:listDocuments');
    route.uri = _.template(route.uri, {
      index: data.index
    });
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    checkDocument
  */


  Client.prototype.checkDocument = function(data, callback) {
    var route;

    if (!((data.index != null) && (data.name != null))) {
      throw "requires both index and document name";
    }
    route = conf.get('routes:downloadDocument');
    route.uri = _.template(route.uri, {
      index: data.index,
      name: encodeURIComponent(data.name)
    });
    route.url = this.server + route.uri;
    route.method = "HEAD";
    route.strictSSL = false;
    return request(route, function(error, response, body) {
      if (error || response.statusCode !== 200) {
        return callback(true, null);
      }
      return callback(null, null, response.headers);
    });
  };

  /*
    downloadDocument
  */


  Client.prototype.downloadDocument = function(writeStream, data, callback) {
    var req, route;

    if (!((data.index != null) && (data.name != null))) {
      throw "requires both index and document name";
    }
    route = conf.get('routes:downloadDocument');
    route.uri = _.template(route.uri, {
      index: data.index,
      name: encodeURIComponent(data.name)
    });
    route.url = this.server + route.uri;
    route.strictSSL = false;
    req = request(route);
    req.pipe(writeStream);
    req.on('error', function(error) {
      return callback(error, null);
    });
    return req.on('end', function() {
      return callback(null, null);
    });
  };

  /*
    deleteDocument
  */


  Client.prototype.deleteDocument = function(data, callback) {
    var route;

    if (!((data.index != null) && (data.name != null))) {
      throw "required index and document name";
    }
    route = conf.get('routes:deleteDocument');
    route.uri = _.template(route.uri, {
      index: data.index,
      name: encodeURIComponent(data.name)
    });
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    restoreDocument
  */


  Client.prototype.restoreDocument = function(data, callback) {
    var route;

    if (!((data.index != null) && (data.name != null))) {
      throw "requires index and document names";
    }
    route = conf.get('routes:restoreDocument');
    route.uri = _.template(route.uri, {
      index: data.index,
      name: data.name
    });
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    documentDetails
  */


  Client.prototype.documentDetails = function(data, callback) {
    var route;

    if (!((data.index != null) && (data.name != null))) {
      throw "required index and document name";
    }
    route = conf.get('routes:documentDetails');
    route.uri = _.template(route.uri, {
      index: data.index,
      name: encodeURIComponent(data.name)
    });
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    Search Action
    data : 
      name Required
      qs/body : Either one not both
    callback: callback fn
  */


  Client.prototype.search = function(data, callback) {
    var route;

    if (!((data.index != null) && ((data.qs != null) || (data.body != null)))) {
      throw "required fields missing";
    }
    route = conf.get('routes:search');
    route.uri = _.template(route.uri, {
      index: data.index
    });
    route.method = data.qs ? 'GET' : 'POST';
    return this.request(route, data, function(err, body) {
      return callback(err, body);
    });
  };

  /*
    Create Folder
    required:
      content-type: searchtower/folder
      content-size: 0
  */


  Client.prototype.createFolder = function(data, callback) {
    var opts, route,
      _this = this;

    if (!((data.index != null) && (data.name != null))) {
      throw "required index and document name";
    }
    route = conf.get('routes:addDocument');
    route.uri = _.template(route.uri, {
      index: data.index,
      name: encodeURIComponent(data.name + '/')
    });
    opts = {
      strictSSL: false,
      url: this.server + route.uri,
      method: 'PUT',
      headers: {
        'content-type': 'searchtower/folder',
        'content-size': 0
      }
    };
    return request(opts, function(err, response, body) {
      return _this._response(err, response, body, function(err, body) {
        return callback(err, body);
      });
    });
  };

  /*
    Add Url to "remote" index
  */


  Client.prototype.addRemoteFile = function(data, callback) {
    var route;

    if (!((data.index != null) && (data.url != null))) {
      throw "required index and url";
    }
    route = conf.get('routes:addDocument');
    route.uri = _.template(route.uri, {
      index: data.index,
      name: encodeURIComponent(data.url)
    }) + ("?url=" + (encodeURIComponent(data.url)));
    route.method = "PUT";
    return this.request(route, data, function(err, cb) {
      return callback(err, cb);
    });
  };

  Client.prototype._response = function(err, response, body, callback) {
    var resp;

    if (err) {
      return callback(err, null);
    }
    resp = new Response(response, body);
    if (response.statusCode !== 200) {
      return callback(resp, null);
    }
    if (response.statusCode === 200) {
      return callback(null, resp);
    }
  };

  return Client;

})();
